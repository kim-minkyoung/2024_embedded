###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       22/Dec/2024  09:21:13
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu3\Desktop\project_test (1) 2-1\user\stm32f10x_HC-SR04.c
#    Command line =  
#        -f C:\Users\pnu3\AppData\Local\Temp\EWBCF4.tmp
#        ("C:\Users\pnu3\Desktop\project_test (1) 2-1\user\stm32f10x_HC-SR04.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        "C:\Users\pnu3\Desktop\project_test (1) 2-1\Debug\List" -o
#        "C:\Users\pnu3\Desktop\project_test (1) 2-1\Debug\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\pnu3\Desktop\project_test (1)
#        2-1\libraries\CMSIS\DeviceSupport\" -I
#        "C:\Users\pnu3\Desktop\project_test (1)
#        2-1\libraries\CMSIS\DeviceSupport\Startup\" -I
#        "C:\Users\pnu3\Desktop\project_test (1)
#        2-1\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\" -I
#        "C:\Users\pnu3\Desktop\project_test (1)
#        2-1\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\" -I
#        "C:\Users\pnu3\Desktop\project_test (1) 2-1\user\" -I
#        "C:\Users\pnu3\Desktop\project_test (1) 2-1\user\inc\" -I
#        "C:\Users\pnu3\Desktop\project_test (1) 2-1\libraries\LCD\" -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu3\Desktop\project_test (1)
#        2-1\Debug\List\stm32f10x_HC-SR04.lst
#    Object file  =  
#        C:\Users\pnu3\Desktop\project_test (1)
#        2-1\Debug\Obj\stm32f10x_HC-SR04.o
#
###############################################################################

C:\Users\pnu3\Desktop\project_test (1) 2-1\user\stm32f10x_HC-SR04.c
      1          //stm32f10x_HC-SR04.c
      2          
      3          #include <stm32f10x_HC-SR04.h>
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void EnableHCSR04PeriphClock() {
   \                     EnableHCSR04PeriphClock: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      6              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
      7              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
      8              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
      9            }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     10          

   \                                 In section .text, align 2, keep-with-next
     11          static void initMeasureTimer() {
   \                     initMeasureTimer: (+1)
   \   00000000   0xB518             PUSH     {R3,R4,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
     12          	RCC_ClocksTypeDef RCC_ClocksStatus;
     13          	RCC_GetClocksFreq(&RCC_ClocksStatus);
   \   00000004   0xA80A             ADD      R0,SP,#+40
   \   00000006   0x.... 0x....      BL       RCC_GetClocksFreq
     14          	uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \   0000000A   0x980A             LDR      R0,[SP, #+40]
   \   0000000C   0x....             LDR.N    R1,??DataTable3  ;; 0xf4240
   \   0000000E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000012   0x1E44             SUBS     R4,R0,#+1
     15          
     16          	TIM_DeInit(US_TIMER);
   \   00000014   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000016   0x.... 0x....      BL       TIM_DeInit
     17          	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     18          	TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
   \   0000001A   0xF8AD 0x400C      STRH     R4,[SP, #+12]
     19          	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     20          	TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
   \   00000024   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000028   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     21          	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     22          	TIM_TimeBaseInit(US_TIMER, &TIM_TimeBaseInitStruct);
   \   00000032   0xA903             ADD      R1,SP,#+12
   \   00000034   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000036   0x.... 0x....      BL       TIM_TimeBaseInit
     23          
     24          	TIM_OCInitTypeDef TIM_OCInitStruct;
     25          	TIM_OCStructInit(&TIM_OCInitStruct);
   \   0000003A   0xA806             ADD      R0,SP,#+24
   \   0000003C   0x.... 0x....      BL       TIM_OCStructInit
     26          	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000040   0x2060             MOVS     R0,#+96
   \   00000042   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     27          	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     28          	TIM_OCInitStruct.TIM_Pulse = 15; //us
   \   0000004C   0x200F             MOVS     R0,#+15
   \   0000004E   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     29          	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     30          	TIM_OC3Init(US_TIMER, &TIM_OCInitStruct);
   \   00000058   0xA906             ADD      R1,SP,#+24
   \   0000005A   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   0000005C   0x.... 0x....      BL       TIM_OC3Init
     31          
     32          	TIM_ICInitTypeDef TIM_ICInitStruct;
     33          	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     34          	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     35          	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     36          	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     37          	TIM_ICInitStruct.TIM_ICFilter = 0;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     38          
     39          	TIM_PWMIConfig(US_TIMER, &TIM_ICInitStruct);
   \   0000007E   0x4669             MOV      R1,SP
   \   00000080   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000082   0x.... 0x....      BL       TIM_PWMIConfig
     40          	TIM_SelectInputTrigger(US_TIMER, US_TIMER_TRIG_SOURCE);
   \   00000086   0x2150             MOVS     R1,#+80
   \   00000088   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   0000008A   0x.... 0x....      BL       TIM_SelectInputTrigger
     41          	TIM_SelectMasterSlaveMode(US_TIMER, TIM_MasterSlaveMode_Enable);
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000092   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
     42          
     43          	TIM_CtrlPWMOutputs(US_TIMER, ENABLE);
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   0000009A   0x.... 0x....      BL       TIM_CtrlPWMOutputs
     44          
     45          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   000000A2   0x.... 0x....      BL       TIM_ClearFlag
     46          }
   \   000000A6   0xB010             ADD      SP,SP,#+64
   \   000000A8   0xBD10             POP      {R4,PC}          ;; return
     47          

   \                                 In section .text, align 2, keep-with-next
     48          static void initPins() {
   \                     initPins: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     49          	GPIO_InitTypeDef GPIO_InitStructure;
     50          	GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     51          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     52          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   0000000E   0x2018             MOVS     R0,#+24
   \   00000010   0xF88D 0x0003      STRB     R0,[SP, #+3]
     53          	GPIO_Init(US_TRIG_PORT, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40010c00
   \   00000018   0x.... 0x....      BL       GPIO_Init
     54          
     55          	GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN;
   \   0000001C   0x2040             MOVS     R0,#+64
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     56          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0xF88D 0x0002      STRB     R0,[SP, #+2]
     57          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \   00000028   0x2004             MOVS     R0,#+4
   \   0000002A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     58          	GPIO_Init(US_ECHO_PORT, &GPIO_InitStructure);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40010800
   \   00000032   0x.... 0x....      BL       GPIO_Init
     59          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void InitHCSR04() {
   \                     InitHCSR04: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     62          	EnableHCSR04PeriphClock();
   \   00000002   0x.... 0x....      BL       EnableHCSR04PeriphClock
     63          	initPins();
   \   00000006   0x.... 0x....      BL       initPins
     64          	initMeasureTimer();
   \   0000000A   0x.... 0x....      BL       initMeasureTimer
     65          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     66          

   \                                 In section .text, align 2, keep-with-next
     67          int32_t HCSR04GetDistance() {
   \                     HCSR04GetDistance: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     68          	(US_TIMER)->CNT = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable3_4  ;; 0x40000424
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     69          	TIM_Cmd(US_TIMER, ENABLE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   0000000C   0x.... 0x....      BL       TIM_Cmd
     70          	while(!TIM_GetFlagStatus(US_TIMER, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance_0: (+1)
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000014   0x.... 0x....      BL       TIM_GetFlagStatus
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD0F9             BEQ.N    ??HCSR04GetDistance_0
     71          	TIM_Cmd(US_TIMER, DISABLE);
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000020   0x.... 0x....      BL       TIM_Cmd
     72          	TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000028   0x.... 0x....      BL       TIM_ClearFlag
     73          	return (TIM_GetCapture2(US_TIMER)-TIM_GetCapture1(US_TIMER))*165/1000;
   \   0000002C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   0000002E   0x.... 0x....      BL       TIM_GetCapture2
   \   00000032   0x0004             MOVS     R4,R0
   \   00000034   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000036   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40000400
   \   00000038   0x.... 0x....      BL       TIM_GetCapture1
   \   0000003C   0x1A24             SUBS     R4,R4,R0
   \   0000003E   0x20A5             MOVS     R0,#+165
   \   00000040   0x4344             MULS     R4,R0,R4
   \   00000042   0xF44F 0x707A      MOV      R0,#+1000
   \   00000046   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
     74          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40000424         DC32     0x40000424

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EnableHCSR04PeriphClock
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   HCSR04GetDistance
         8   -> TIM_ClearFlag
         8   -> TIM_Cmd
         8   -> TIM_GetCapture1
         8   -> TIM_GetCapture2
         8   -> TIM_GetFlagStatus
       8   InitHCSR04
         8   -> EnableHCSR04PeriphClock
         8   -> initMeasureTimer
         8   -> initPins
      72   initMeasureTimer
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit
       8   initPins
         8   -> GPIO_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      28  EnableHCSR04PeriphClock
      76  HCSR04GetDistance
      16  InitHCSR04
     170  initMeasureTimer
      56  initPins

 
 366 bytes in section .text
 
 366 bytes of CODE memory

Errors: none
Warnings: none
